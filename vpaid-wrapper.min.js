(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function __IASVANS(q){var k={now:function(){return(new Date).getTime()},sendMonitoringPixel:function(c){try{this.sendUrlRequest(["//pixel.adsafeprotected.com/mon?anId=10173&campId=",encodeURIComponent(l.getPartnerId()),"&pubId=",encodeURIComponent("vans-js_"+c)].join(""))}catch(b){h.report("smp",b)}},sendUrlRequest:function(c,b){var g,a;if(c){g=this.getWindow();try{a=new g.XMLHttpRequest,b&&(a.onreadystatechange=b),a.open("GET",c),a.send()}catch(e){}}},getWindow:function(){return m.getWin()},
getDocument:function(){return m.getDoc()},generateUID:function(){var c,b="";try{for(c=0;8>c;c++)b=[b,Math.floor(65536*(1+Math.random())).toString(16).substring(1)].join("")}catch(g){}return b},noop:function(){}},h=function(){var c={};return{report:function(b,g){if(!c[b])try{c[b]=!0,k.sendUrlRequest(["//pixel.adsafeprotected.com/jsdiagnostic?code:vans-js_",encodeURIComponent(l.getPartnerId()),"_",b,"&err:",encodeURIComponent(g.message)].join(""))}catch(a){}}}}(),n=function(){var c,b=!1,g=function(e){e==
a()&&(b=!0,p.flushUnsentEvents());return b?"jv3":null},a=function(){c||(c=k.generateUID());return c};return{getVideoId:a,setNodeInterface:function(e){var b,c,f=a();try{b="IASid"+f,c="blockAd"+f,e.className+=" integral-vid-"+f,e[c]=k.noop,e[b]=g,e.getVersion=function(){return"3.3.0"}}catch(r){h.report("sni",r)}},isEstablished:function(){return b},resetHandshake:function(){b=!1}}}(),s=function(){var c,b=function(){var e=function(e){return"undefined"!==typeof e},a=function(){var a="u";try{e(window.opera)&&
e(window.opera.buildNumber)?a="o":e(window.mozInnerScreenY)?a="g":e(window.chrome)&&e(window.chrome.csi)?a="c":e(window.msWriteProfilerMark)&&e(window.crypto)?a="e":e(window.attachEvent)||e(window.msCrypto)?a="i":e(window.WebKitPoint)&&(a="w")}catch(b){}return a}(),b=function(){var a=function(a){for(var b in a)if(a.hasOwnProperty(b)){var c=a[b];""!==c&&"null"!==c&&"undefined"!==c&&null!==c&&e(c)||delete a[b]}return a},b=function(a){var b={},c,d;for(d in a)a.hasOwnProperty(d)&&(c=a[d],e(b[c])?b[c]+=
d:b[c]=d);a={};for(d in b)b.hasOwnProperty(d)&&(c=b[d],a[c]=d);return a};return function(){var c=function(){var a={g:"",q:""};try{a.q=window.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.location.href}catch(c){var b=c.message,b=b.substring(b.lastIndexOf("<")+1,b.lastIndexOf(">")),d;if(d=e(b))if(d=!1,e(window.navigator)&&e(window.navigator.userAgent)){var f=window.navigator.userAgent.match(/Firefox\/([\.0-9]+)/);null!==f&&2==f.length&&(f=f[1].split("."),3==parseInt(f[0],10)&&
6>=parseInt(f[1],10)&&(3==f.length?13>=parseInt(f[2],10)&&(d=!0):d=!0))}d&&(a.g=b)}return a},d={};try{d.a=encodeURIComponent(top.location.href)}catch(g){}try{d.b=encodeURIComponent(parent.location.href)}catch(h){}if(window!=top){try{d.c=encodeURIComponent(parent.document.referrer)}catch(t){}try{d.e=encodeURIComponent(window.document.referrer)}catch(k){}}try{d.d=encodeURIComponent(window.location.href)}catch(p){}try{var n=c();d.g=encodeURIComponent(n.g);d.q=encodeURIComponent(n.q)}catch(l){}var d=
a(d),d=b(d),c=[],m;for(m in d)d.hasOwnProperty(m)&&c.push({key:m,val:d[m]});c.sort(function(a,b){return a.val.length>b.val.length?1:a.val.length<b.val.length?-1:0});return c}()}();return{br:a,urls:b}},g=function(a,b,c){var f=["//pixel.adsafeprotected.com/db2/video/",b,"/",c,"/skeleton.js?videoId=",n.getVideoId()].join("");b=function(a){f=[f,"&adsafe_url=",a.val,"&adsafe_type=",a.key].join("")};try{a.urls.forEach(b),f=[f,"&adsafe_jsinfo=br:",a.br].join("")}catch(g){h.report("bvu",g)}return f},a=function(){if(4==
this.readyState)if(p.sendPerfSample(40),200==this.status)try{c("failed"===JSON.parse(this.responseText).action?"block":"safe")}catch(a){h.report("ba",a)}else h.report("blk_url_req_err",{message:this.status})};return{init:function(e,d,h){var f=b();p.sendPerfSample(30);e=g(f,e,d);c=h;k.sendUrlRequest(e,a)}}}(),p=function(){var c=[],b=function(a){if(n.isEstablished())try{k.getWindow().postMessage(JSON.stringify(a),"*")}catch(b){h.report("dm",b)}else try{c.push(a)}catch(d){h.report("cm",d)}},g=function(a,
c){try{b({messageType:a,id:n.getVideoId(),time:k.now(),partner:l.getPartnerId(),eventData:c})}catch(d){h.report("se",d)}};return{sendEvent:g,flushUnsentEvents:function(){try{c.forEach(b)}catch(a){h.report("fue",a)}},sendPerfSample:function(a){g("PerfCheckpoint",{type:"vans",code:a,timestamp:k.now()})}}}(),l=function(){var c,b=function(a,b){var c,g=q||"pixel.adsafeprotected.com",f=function(a){var b="";Object.keys(a).forEach(function(c){"advEntityId"!=c&&"pubEntityId"!=c&&"partner"!=c&&(b+="&"+c+"="+
a[c])});return b};try{c=["//",g,a,"?videoId=",n.getVideoId(),f(b)].join("")}catch(k){h.report("bsurl",k)}return c},g=function(a,c,d){var g,f=k.getDocument();try{g=f.createElement("script"),g.src=b(a,c),d.parentNode.appendChild(g)}catch(h){k.sendMonitoringPixel("inj_err")}};return{initCM:function(a,b){if(!a.partner)throw Error("missing partnerId");m.setWin(b);p.sendPerfSample(20);c=a.partner;try{if(!a.anId)throw Error("missing anId");k.sendMonitoringPixel("cminit");n.setNodeInterface(b);g("/jsvid",
a,b)}catch(d){h.report("icm",d)}},initFW:function(a,b,d){var l;if(!a.partner)throw Error("missing partnerId");m.setWin(b);p.sendPerfSample(20);c=a.partner;try{if(!a.advEntityId||!a.pubEntityId)throw Error("missing client id: advEntityId: "+a.advEntityId+" ,pubEntityId: "+a.pubEntityId);k.sendMonitoringPixel("fwinit");d&&s.init(a.advEntityId,a.pubEntityId,d);l="/fwjsvid/st/"+a.advEntityId+"/"+a.pubEntityId+"/skeleton.js";n.setNodeInterface(b);g(l,a,b)}catch(f){h.report("ifw",f)}},getPartnerId:function(){return c}}}(),
m=function(){var c=window;return{getWin:function(){return c},setWin:function(b){(b=b&&b.ownerDocument)&&b.defaultView?c=b.defaultView:b&&b.parentWindow?c=b.parentWindow:h.report("sc",{message:""})},getDoc:function(){return c.document}}}();p.sendPerfSample(10);return{initFW:l.initFW,initCM:l.initCM,sendEvent:p.sendEvent}};
},{}],2:[function(require,module,exports){
module.exports = function player(config) {

    var adsManager;
    var adsLoader;
    var adDisplayContainer;
    var intervalTimer;
    var videoContent;
    var currentAd;
    var currentDuration = -2; //-2 means unknown in the VPAID spec

    function loadJsFile(parent, filename) {
        var fileref = document.createElement('script');
        fileref.setAttribute("type", "text/javascript");
        fileref.setAttribute("src", filename);
        parent.appendChild(fileref);
        return fileref;
    }

    function initAd() {
        var tag = loadJsFile(document.getElementsByTagName("head")[0], "https://imasdk.googleapis.com/js/sdkloader/ima3.js");
        tag.onload = setUpIMA;
    }

    function setUpIMA() {

        videoContent = config.videoSlot;

        // Create the ad display container.
        adDisplayContainer = new google.ima.AdDisplayContainer(config.slot, videoContent);

        // Create ads loader.
        adsLoader = new google.ima.AdsLoader(adDisplayContainer);
        // Listen and respond to ads loaded and error events.
        adsLoader.addEventListener(
            google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,
            onAdsManagerLoaded,
            false);
        adsLoader.addEventListener(
            google.ima.AdErrorEvent.Type.AD_ERROR,
            onAdError,
            false);

        // Request video ads.
        var adsRequest = new google.ima.AdsRequest();
        adsRequest.adsResponse = config.xml;

        // Specify the linear and nonlinear slot sizes. This helps the SDK to
        // select the correct creative if multiple are returned.
        adsRequest.linearAdSlotWidth = config.linearWidth;
        adsRequest.linearAdSlotHeight = config.linearHeight;

        //doesn't matter, we don't support non-linear
        adsRequest.nonLinearAdSlotWidth = config.linearWidth;
        adsRequest.nonLinearAdSlotHeight = config.linearHeight;

        adsLoader.requestAds(adsRequest);
    }

    function playAd() {
        // Initialize the container. Must be done via a user action on mobile devices.
        videoContent.load();
        adDisplayContainer.initialize();

        try {
            // Initialize the ads manager. Ad rules playlist will start at this time.
            adsManager.init(config.linearWidth, config.linearHeight, config.linearViewMode);
            // Call play to start showing the ad. Single video and overlay ads will
            // start at this time; the call will be ignored for ad rules.
            adsManager.start();
        } catch (adError) {

            try {
                adsManager.destroy();
            } catch (err) {}
            config.onAdError("Failed to start AdsManager");
        }
    }

    function pauseAd() {
        adsManager.pause();
    }

    function resumeAd() {
        adsManager.resume();
    }

    function getAdRemainingTime() {
        return adsManager.getRemainingTime();
    }

    function getAdDuration() {
        return currentDuration;
    }

    function stopAd() {
        adsManager.stop();
    }

    function getAdVolume() {
        return adsManager.getVolume();
    }

    function setAdVolume(vol) {
        adsManager.setVolume(vol);
    }

    function resizeAd(width, height, viewMode) {
        adsManager.resize(width, height, viewMode);
    }

    function getAdSkippableState() {
        return adsManager.getAdSkippableState();
    }

    function skipAd() {
        adsManager.skip();
    }

    function onAdsManagerLoaded(adsManagerLoadedEvent) {
        // Get the ads manager.
        var adsRenderingSettings = new google.ima.AdsRenderingSettings();
        adsRenderingSettings.bitrate = config.bitrate;

        adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;
        // videoContent should be set to the content video element.
        adsManager = adsManagerLoadedEvent.getAdsManager(
            videoContent, adsRenderingSettings);

        // Add listeners to the required events.
        adsManager.addEventListener(
            google.ima.AdErrorEvent.Type.AD_ERROR,
            onAdError);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,
            onContentPauseRequested);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,
            onContentResumeRequested);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.ALL_ADS_COMPLETED,
            onAdEvent);

        // Listen to any additional events, if necessary.
        adsManager.addEventListener(
            google.ima.AdEvent.Type.LOADED,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.STARTED,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.FIRST_QUARTILE,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.MIDPOINT,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.THIRD_QUARTILE,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.COMPLETE,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.DURATION_CHANGE,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.PAUSED,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.RESUMED,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.VOLUME_CHANGED,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.VOLUME_MUTED,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.SKIPPED,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.USER_CLOSE,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.IMPRESSION,
            onAdEvent);
        adsManager.addEventListener(
            google.ima.AdEvent.Type.CLICK,
            onAdEvent);
        config.onAdsManagerLoaded();
    }

    function onAdEvent(adEvent) {

        var ad = adEvent.getAd();

        if (!ad || !ad.isLinear()) {
            return;
        }

        switch (adEvent.type) {
            case google.ima.AdEvent.Type.LOADED:

                currentAd = ad;
                break;
            case google.ima.AdEvent.Type.STARTED:

                config.onStart();
                currentDuration = ad.getDuration();
                config.onDurationChange();

                intervalTimer = setInterval(
                    function() {
                        var remainingTime = adsManager.getRemainingTime();

                        if (currentAd !== null) {
                            var duration = currentAd.getDuration();

                            if (duration != currentDuration) {
                                currentDuration = duration;
                                config.onDurationChange();
                            }
                        }
                    },
                    300); // every 300ms

                break;
            case google.ima.AdEvent.Type.FIRST_QUARTILE:

                config.onFirstQuartile();
                break;
            case google.ima.AdEvent.Type.MIDPOINT:

                config.onMidpoint();
                break;
            case google.ima.AdEvent.Type.THIRD_QUARTILE:

                config.onThirdQuartile();
                break;
            case google.ima.AdEvent.Type.COMPLETE:

                clearInterval(intervalTimer);
                config.onComplete();
                break;
            case google.ima.AdEvent.Type.DURATION_CHANGE:

                config.onDurationChange();
                break;
            case google.ima.AdEvent.Type.PAUSED:

                config.onPaused();
                break;
            case google.ima.AdEvent.Type.RESUMED:

                config.onResumed();
                break;
            case google.ima.AdEvent.Type.VOLUME_CHANGED:

                config.onVolumeChanged();
                break;
            case google.ima.AdEvent.Type.VOLUME_MUTED:

                config.onVolumeMuted();
                break;
            case google.ima.AdEvent.Type.SKIPPED:

                config.onSkipped();
                break;
            case google.ima.AdEvent.Type.USER_CLOSE:

                config.onUserClose();
                break;
            case google.ima.AdEvent.Type.IMPRESSION:

                config.onImpression();
                break;
            case google.ima.AdEvent.Type.CLICK:

                config.onClickthrough();
                break;
        }
    }

    function onAdError(adErrorEvent) {
        // Handle the error logging.
        try {
            adsManager.destroy();
        } catch (err) {}
        config.onAdError(adErrorEvent.getError().getMessage());
    }

    function onContentPauseRequested() {}
    function onContentResumeRequested() {}

    return {
        initAd: initAd,
        playAd: playAd,
        pauseAd: pauseAd,
        resumeAd: resumeAd,
        getAdRemainingTime: getAdRemainingTime,
        getAdDuration: getAdDuration,
        stopAd: stopAd,
        setAdVolume: setAdVolume,
        getAdVolume: getAdVolume,
        resizeAd: resizeAd,
        getAdSkippableState: getAdSkippableState,
        skipAd: skipAd
    };
};

},{}],3:[function(require,module,exports){
var player = require('./player');
var __IASVANS = require('./__IASVANS');

var VPAIDWrapper = function() {

    var adPlayer = null;
    var slot = null;
    var videoSlot = null;
    var eventsCallbacks = {};
    var params = {};
    var currentWidth = -1;
    var currentHeight = -1;
    var bitrate = -1;
    var currentViewMode = null;
    var ias = null;
    var companions = null;

    function initAd(
        width,
        height,
        viewMode,
        desiredBitrate,
        creativeData,
        environmentVars) {
        // slot and videoSlot are passed as part of the environmentVars
        currentWidth = width;
        currentHeight = height;
        bitrate = desiredBitrate;
        currentViewMode = viewMode;

        slot = environmentVars.slot;
        videoSlot = environmentVars.videoSlot;

        // Parse the incoming parameters.
        params = JSON.parse(creativeData.AdParameters);

        log('initAd ' + width + 'x' + height +
            ' ' + viewMode + ' ' + desiredBitrate);

        if (videoSlot === null) {
            videoSlot = document.createElement('video');
            log('Warning: No video element passed to ad, creating element.');
            slot.appendChild(videoSlot);
        }

        var iasEnabled = params.iasEnabled;

        if(iasEnabled && iasEnabled.toLowerCase() == 'true'){

            var iasConfig = {
                'anId': '924394',
                'partner': 'MediaMath',
                'advId': params.advertiserId,
                'campId': params.strategyId,
                'pubId': params.exchangeId,
                'placementId': params.creativeId,
                'bidUrl': params.bidUrl,
                'impId': params.auctionId
            };

            ias = new __IASVANS();
            ias.initCM(iasConfig);
        }

        var xhttp = new XMLHttpRequest();

        xhttp.timeout = 2000;

        xhttp.onreadystatechange = function(){

            console.log(xhttp);

            if(this.readyState == 4){

                if(this.responseText !== null) {
                    onXMLLoaded(this.responseText);
                }
                else {
                    //callEvent('AdError');
                }
            }
        };

        //xhttp.ontimeout = callEvent('AdError');

        xhttp.open("GET", params.url, true);
        xhttp.send();

    }

    function onXMLLoaded(xmlResponse) {

        try {

            var parser = new DOMParser();
            var xmlDoc = parser.parseFromString(xmlResponse, "text/xml");
            var companionAds = xmlDoc.getElementsByTagName("CompanionAds");

            if(companionAds.length > 0){

                var serializer = new XMLSerializer();
                companions = serializer.serializeToString(companionAds[0]);
            }
        } catch(err) {}

        adPlayer = player({
            slot: slot,
            videoSlot: videoSlot,
            xml: xmlResponse,
            bitrate: bitrate,
            linearWidth: currentWidth,
            linearHeight: currentHeight,
            linearViewMode: currentViewMode,
            onAdsManagerLoaded: function() { callEvent('AdLoaded'); },
            onStart: function(){
                log('Started');
                callEvent('AdVideoStart');
                callEvent('AdStarted');
            },
            onFirstQuartile: function() { callEvent('AdVideoFirstQuartile'); },
            onMidpoint: function() { callEvent('AdVideoMidpoint'); },
            onThirdQuartile: function() { callEvent('AdVideoThirdQuartile'); },
            onComplete: function(){
                callEvent('AdVideoComplete');
                stopAd();
            },
            onDurationChange: function() { callEvent('AdDurationChange'); },
            onPaused: function() { callEvent('AdPaused'); },
            onResumed: function() { callEvent('AdPlaying'); },
            onVolumeChanged: function() { callEvent('AdVolumeChange'); },
            onVolumeMuted: function() { callEvent('AdVolumeChange'); },
            onSkipped: function() { callEvent('AdSkipped'); },
            onUserClose: function() { callEvent('AdUserClose'); },
            onImpression: function() { callEvent('AdImpression'); },
            onClickthrough: function() { callEvent('AdClickThru'); },
            onAdError: function() { callEvent('AdError'); }
        });

        adPlayer.initAd();
    }

    function handshakeVersion(version) {
        return ('2.0');
    }

    function startAd() {
        log('Starting ad');
        adPlayer.playAd();
    }

    function stopAd() {
        log('Stopping ad');
        // Calling AdStopped immediately terminates the ad. Setting a timeout allows
        // events to go through.
        adPlayer.stopAd();
        setTimeout(callEvent, 75, ['AdStopped']);
    }

    function setAdVolume(value) {
        log('setAdVolume ' + value);
        adPlayer.setAdVolume(value);
    }

    function getAdVolume() {
        log('getAdVolume');
        return adPlayer.getAdVolume();
    }

    function resizeAd(width, height, viewMode) {
        log('resizeAd ' + width + 'x' + height + ' ' + viewMode);
        adPlayer.resizeAd(width, height, viewMode);
        
        currentWidth = width;
        currentHeight = height;
        currentViewMode = viewMode;

        if(ias){

            var volume = getAdVolume();
            var duration = getAdDuration();

            ias.sendEvent('resizeAd', {
                'volume': volume,
                'ad_duration': duration,
                'width': width,
                'height': height,
                'viewMode': viewMode
            });
        }

        callEvent('AdSizeChange');
    }

    function pauseAd() {
        log('pauseAd');
        adPlayer.pauseAd();
    }

    function resumeAd() {
        log('resumeAd');
        adPlayer.resumeAd();
    }

    function expandAd() {
        log('expandAd (not supported)');
    }

    function getAdExpanded() {
        log('getAdExpanded');
        return false;
    }

    function getAdSkippableState() {
        log('getAdSkippableState');
        return adPlayer.getAdSkippableState();
    }

    function collapseAd() {
        log('collapseAd (not supported)');
    }

    function skipAd() {
        log('skipAd');

        if (getAdSkippableState()) {
            adPlayer.skipAd();
        }
    }

    function subscribe(aCallback, eventName, aContext) {
        log('Subscribe for ' + eventName + ' - ' + aCallback);
        var callBack = aCallback.bind(aContext);
        eventsCallbacks[eventName] = callBack;
    }

    function unsubscribe(eventName) {
        log('unsubscribe ' + eventName);
        eventsCallbacks[eventName] = null;
    }

    function getAdWidth() {
        return currentWidth;
    }

    function getAdHeight() {
        return currentHeight;
    }

    function getAdRemainingTime() {
        log('remaining time = ' + adPlayer.getAdRemainingTime());
        return adPlayer.getAdRemainingTime();
    }

    function getAdDuration() {
        log('duration = ' + adPlayer.getAdDuration());
        return adPlayer.getAdDuration();
    }

    function getAdIcons() {
        log("AdIcons not currently supported");
        return false;
    }

    function getAdCompanions() {
      return companions;
    }

    function getAdLinear() {
        log("Only Linear Ads supported");
        return true;
    }

    function log(message) {
        console.log(message);
    }

    function callEvent(eventType) {

        if(ias){

            var volume = getAdVolume();
            var duration = getAdDuration();

            ias.sendEvent(eventType, {
                'volume': volume,
                'ad_duration': duration
            });
        }

        if (eventType in eventsCallbacks) {
            log("raising event " + eventType);
            eventsCallbacks[eventType]();
        }
    }

    return {
        getAdLinear: getAdLinear,
        getAdCompanions: getAdCompanions,
        getAdIcons: getAdIcons,
        getAdDuration: getAdDuration,
        getAdRemainingTime: getAdRemainingTime,
        getAdHeight: getAdHeight,
        getAdWidth: getAdWidth,
        getAdSkippableState: getAdSkippableState,
        getAdExpanded: getAdExpanded,
        getAdVolume: getAdVolume,
        setAdVolume: setAdVolume,
        unsubscribe: unsubscribe,
        subscribe: subscribe,
        expandAd: expandAd,
        collapseAd: collapseAd,
        skipAd: skipAd,
        resumeAd: resumeAd,
        pauseAd: pauseAd,
        resizeAd: resizeAd,
        initAd: initAd,
        startAd: startAd,
        stopAd: stopAd,
        handshakeVersion: handshakeVersion
    };
};

/**
 * Main function called by wrapper to get the vpaid ad.
 * @return {Object} The vpaid compliant ad.
 */
window.getVPAIDAd = function() {
    return new VPAIDWrapper();
};

},{"./__IASVANS":1,"./player":2}]},{},[3]);
